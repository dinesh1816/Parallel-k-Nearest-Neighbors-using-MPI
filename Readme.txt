Parallel k-Nearest Neighbors (k-NN) Using MPI and PythonProject DescriptionThis project implements a parallelized version of the k-Nearest Neighbors (k-NN) algorithm using Python. It leverages multiprocessing to efficiently classify data by distributing the computational workload across multiple processes. The project includes data preprocessing, hyperparameter tuning, and evaluation metrics computation with visualizations.RequirementsBefore running the project, ensure you have the following:1. Python Version: Python 3.7 or higher.2. Libraries:o numpyo pandaso scikit-learno matplotlibInstall all required libraries using the following command: bashpip install -r requirements.txtSteps to Run the ProjectStep 1: Clone or Download the RepositorybashCopy codegit clone https://github.com/dinesh1816/Parallel-k-Nearest-Neighbors-using-MPI.gitcd project-directoryStep 2: Prepare the DatasetEnsure the datasets (train.csv and test.csv) are located in the data/ folder. The dataset should be in CSV format with the following structure:* Features: Columns representing numerical features.* Labels: The last column contains class labels.Step 3: Run the codeRun the preprocessing script to shuffle, normalize, and split the data into training, validation, and test sets.bashCopy codepython Parallel_Algorithm.ipynbStep 4: View the ResultsAfter running the script, you can view:1. Confusion Matrix: A visualization of the confusion matrix.2. Metrics: Accuracy, Precision, Recall, and F1 Score printed in the terminal.3. Plots:o Accuracy and precision graphs.o ROC and AUC curves.Customization* Modify hyperparameters (e.g., kkk-values, weighting schemes) in main.py under the K_values and weight_scheme variables.* Add additional evaluation metrics or visualizations in evaluation.py.Troubleshooting1. Error: "No module named <module>":o Ensure all required libraries are installed using pip install -r requirements.txt.2. Dataset Errors:o Verify that train.csv and test.csv are formatted correctly with numerical features and class labels.3. Performance Issues:o Increase or decrease the number of processes in Pool(cpu_count()) based on your system's capabilities.